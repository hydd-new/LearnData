import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as a,c as s,d as p}from"./app.e99e8fad.js";const t={},o=p(`<ul><li>\u5982\u679C $max(a_1,a_2,\\cdots,a_m)\\cdot min(a_1,a_2,\\cdots,a_m)\\geq a_1+a_2+\\cdots+a_m$\uFF0C\u5219\u6574\u6570\u5E8F\u5217 $a_1,a_2,\\cdots,a_m$ \u88AB\u79F0\u4E3A\u597D\u7684\u3002</li><li>\u5982\u679C $a$ \u7684\u6BCF\u4E2A\u975E\u7A7A<strong>\u5B50\u5E8F\u5217</strong>\u90FD\u662F\u597D\u7684\uFF0C\u5219\u6574\u6570\u5E8F\u5217 $a_1,a_2,\\cdots,a_n$ \u88AB\u79F0\u4E3A\u5B8C\u7F8E\u7684\u3002</li><li>\u7ED9\u5B9A\u4E24\u4E2A\u6574\u6570 $n$ \u548C $M$\uFF0C$M$ \u662F\u7D20\u6570\u3002\u6C42\u5B8C\u7F8E\u5E8F\u5217 $a_1,a_2,\\cdots,a_n$ \u4E14\u6BCF\u9879\u6EE1\u8DB3 $1\\leq a_i\\leq n+1$ \u7684\u6570\u91CF\uFF0C\u5BF9 $M$ \u53D6\u6A21\u3002</li><li>$1\\leq n\\leq 200,10^8\\leq M\\leq 10^9$\u3002</li></ul><h3 id="sol" tabindex="-1"><a class="header-anchor" href="#sol" aria-hidden="true">#</a> sol</h3><ul><li>\u53EF\u4EE5\u53D1\u73B0 \u4E00\u4E2A\u5E8F\u5217\u662F\u5B8C\u7F8E\u7684 \u7B49\u4EF7\u4E8E \u5C06\u5B83\u4ECE\u5C0F\u5230\u5927\u6392\u5E8F\u540E\u7684\u5E8F\u5217\u662F\u5B8C\u7F8E\u7684\uFF08\u5373\u987A\u5E8F\u65E0\u5173\uFF09\u3002</li></ul><h4 id="\u5224\u65AD\u4E00\u4E2A\u4ECE\u5C0F\u5230\u5927\u7684\u5E8F\u5217\u662F\u5426\u662F\u5B8C\u7F8E\u7684" tabindex="-1"><a class="header-anchor" href="#\u5224\u65AD\u4E00\u4E2A\u4ECE\u5C0F\u5230\u5927\u7684\u5E8F\u5217\u662F\u5426\u662F\u5B8C\u7F8E\u7684" aria-hidden="true">#</a> \u5224\u65AD\u4E00\u4E2A\u4ECE\u5C0F\u5230\u5927\u7684\u5E8F\u5217\u662F\u5426\u662F\u5B8C\u7F8E\u7684</h4><ul><li><p>\u4EE5\u4E0B\u7684\u5E8F\u5217\uFF0C$a$ \u90FD\u662F\u4ECE\u5C0F\u5230\u5927\u7684\u5E8F\u5217\u3002</p></li><li><p>\u53D1\u73B0\u8FD9\u7B49\u4EF7\u4E8E\u8FD9\u4E2A\u5E8F\u5217\u7684\u6240\u6709\u524D\u7F00\u90FD\u662F\u597D\u7684\u3002</p><ul><li>\u5047\u8BBE\u9009\u51FA\u7684\u5B50\u5E8F\u5217\u7684\u6700\u5C0F/\u6700\u5927\u4E0B\u6807\u5206\u522B\u4E3A $l,r$\uFF0C\u90A3\u4E48 $mul\\geq a_1\\cdot a_r\\geq a_1+a_2+\\cdots a_r\\geq sum$\u3002</li></ul></li><li><p>\u8FD9\u8FD8\u4E0D\u591F\uFF0C\u6211\u4EEC\u518D\u627E\u4E00\u4E9B\u6761\u4EF6\u3002</p></li></ul><ol><li>$a_k\\geq k$\u3002 <ul><li>\u5982\u679C\u4E0D\u6EE1\u8DB3\uFF0C\u5219 $a_1\\cdot a_k&lt;a_1\\cdots k&lt;a_1+a_2+\\cdots a_r$ \u77DB\u76FE\u3002</li></ul></li><li>\u82E5\u5B58\u5728 $a_k=k$\uFF0C\u5219 $a_1=a_2=\\cdots=a_k=k$\u3002 <ul><li>$a_1\\cdot a_k=a_1\\cdot k\\geq a_1+a_2+\\cdots a_r$\uFF0C\u5373 $(a_1-a_1)+(a_2-a_1)+\\cdots+(a_k-a_1)\\leq 0$\uFF0C\u800C $a_i\\geq a_1$\uFF0C\u6240\u4EE5 $a_i=k$\u3002</li><li>\u53EF\u4EE5\u53D1\u73B0 $a_n=n$ \u53EA\u6709\u4E00\u79CD\u65B9\u6848\uFF0C\u5426\u5219 $a_n=n+1$\u3002</li></ul></li><li>\u5982\u679C $a_n=n+1,a_i\\geq i+1$\uFF0C\u90A3\u4E48\u6574\u4E2A\u5E8F\u5217\u662F\u5B8C\u7F8E\u7684 \u7B49\u4EF7\u4E8E \u6574\u4E2A\u5E8F\u5217\u662F\u597D\u7684\u3002 <ul><li>\u6574\u4E2A\u5E8F\u5217\u662F\u597D\u7684\u5F53\u4E14\u4EC5\u5F53 $(a_1-a_1)+(a_2-a_1)+\\cdots+(a_n-a_1)\\leq a_1$\u3002</li><li>\u6574\u4E2A\u5E8F\u5217\u662F\u5B8C\u7F8E\u7684\u663E\u7136\u5FC5\u987B\u6EE1\u8DB3\u6574\u4E2A\u5E8F\u5217\u662F\u597D\u7684\u3002</li><li>\u8003\u8651\u524D\u7F00 $1..k$\uFF0C\u5B83\u662F\u597D\u7684\u5F53\u4E14\u4EC5\u5F53 $(a_1-a_1)+(a_2-a_1)+\\cdots+(a_k-a_1)\\leq a_1\\cdot (a_k-k)$\uFF0C\u82E5\u6EE1\u8DB3 $(a_1-a_1)+(a_2-a_1)+\\cdots+(a_n-a_1)\\leq a_1$\uFF08\u6574\u4E2A\u5E8F\u5217\u662F\u597D\u7684\uFF09 \u5219\u4E00\u5B9A\u6EE1\u8DB3\u4E0A\u8FF0\u6761\u4EF6\uFF0C\u800C\u6BCF\u4E2A\u524D\u7F00\u90FD\u662F\u597D\u7684\u6240\u4EE5\u6574\u4E2A\u5E8F\u5217\u662F\u5B8C\u7F8E\u7684\u3002</li></ul></li><li>\u5982\u679C $a_n=n+1,a_i\\geq i$\uFF0C\u90A3\u4E48\u6574\u4E2A\u5E8F\u5217\u662F\u5B8C\u7F8E\u7684 \u7B49\u4EF7\u4E8E \u6EE1\u8DB3\u6761\u4EF6 2\uFF0C\u4E14\u6574\u4E2A\u5E8F\u5217\u662F\u597D\u7684\u3002 <ul><li>\u6EE1\u8DB3\u6761\u4EF6 2\uFF0C\u5047\u8BBE $a_1=a_2=\\cdots=a_k=k$\uFF0C\u5BF9\u4E8E\u957F\u5EA6\u4E0D\u8D85\u8FC7 $k$ \u7684\u524D\u7F00\u663E\u7136\u90FD\u662F\u597D\u7684\u3002</li><li>\u957F\u5EA6\u8D85\u8FC7 $k$ \u7684\u524D\u7F00\u8BC1\u660E\u548C 3 \u7C7B\u4F3C\u3002</li></ul></li></ol><h4 id="\u4ECE\u5C0F\u5230\u5927\u7684\u5B8C\u7F8E\u5E8F\u5217\u7684\u65B9\u6848\u6570" tabindex="-1"><a class="header-anchor" href="#\u4ECE\u5C0F\u5230\u5927\u7684\u5B8C\u7F8E\u5E8F\u5217\u7684\u65B9\u6848\u6570" aria-hidden="true">#</a> \u4ECE\u5C0F\u5230\u5927\u7684\u5B8C\u7F8E\u5E8F\u5217\u7684\u65B9\u6848\u6570</h4><ul><li><p>\u56FA\u5B9A $a_1$ \u7684\u503C\uFF1A</p><ul><li><p>$a_1\\leq a_2\\leq \\cdots \\leq a_n$\u3002</p></li><li><p>\u5BF9\u4E8E $i\\leq a_1$\uFF0C$a_1\\leq a_i\\leq n+1$</p><ul><li>$a_2\\cdots a_{i-1}$ \u4E0D\u80FD $&lt;a_1$\uFF0C\u5426\u5219\u5C31\u548C\u5355\u8C03\u6027\uFF08\u4ECE\u5C0F\u5230\u5927\uFF09\u77DB\u76FE\u3002</li><li>$a_{a_1}$ \u53EF\u4EE5\u662F $a_{a_1}$ \u4E5F\u53EF\u4EE5\u662F\u66F4\u5927\u7684\u6570\u3002</li><li>\u4F60\u4E5F\u53EF\u4EE5\u628A\u8FD9\u4E2A\u6761\u4EF6\u5F53\u6210\uFF1A\u5BF9\u4E8E $i\\lt a_1$\uFF0C$i+1\\leq a_i\\leq n+1$ \u4E14 $a_1\\leq a_{a_1}\\leq n+1$\uFF0C\u4F46\u662F\u8FD9\u4E2A\u5F62\u5F0F\u4E0D\u4FBF\u4E8E\u4E4B\u540E\u7684\u8BA1\u7B97\u3002</li></ul></li><li><p>\u5BF9\u4E8E $i&gt;a_1$\uFF0C$i+1\\leq a_i\\leq n+1$</p><ul><li>$a_i$ \u4E0D\u80FD\u53D6 $i$\uFF0C\u5426\u5219\u5C31\u548C $a_1$ \u7684\u503C\u77DB\u76FE\uFF08\u6761\u4EF62\uFF09\u3002</li></ul></li><li><p>$(a_1-a_1)+(a_2-a_1)+\\cdots+(a_n-a_1)\\leq a_1$\u3002</p></li><li><p>\u8BBE $b_i=a_i-a_1$\uFF0C\u90A3\u4E48\uFF1A</p><ul><li>$b_1=0$</li><li>$b_1\\leq b_2\\leq \\cdots \\leq b_n$</li><li>$0\\leq b_i\\leq n+1-a_1$</li><li>$b_1+b_2+\\cdots+b_n\\leq a_1$</li><li>$b_n\\geq n+1-a_1$\uFF0C$b_{n-1}\\geq n-a_1$\uFF0C...\uFF0C$b_{a_1+1}\\geq 2$</li></ul></li><li><p>\u663E\u7136\u56FA\u5B9A $a_1$ \u540E\uFF0C$b$ \u548C $a$ \u662F\u4E00\u4E00\u5BF9\u5E94\u7684\u3002</p></li></ul></li><li><p>\u7531\u4E8E\u9700\u8981\u6EE1\u8DB3 $b_n\\geq n+1-a_1$\uFF0C$b_{n-1}\\geq n-a_1$\uFF0C...\uFF0C$b_{a_1+1}\\geq 2$ \u548C $b_1+b_2+\\cdots+b_n\\leq a_1$ \u8FD9\u4E24\u4E2A\u6761\u4EF6\uFF0C$a_1$ \u5927\u6982\u53EA\u6709 $O(\\sqrt n)$ \u79CD\u53D6\u503C\u3002</p></li><li><p>\u679A\u4E3E\u53D1\u73B0 $n$ \u53D6\u6700\u5927\u503C $200$ \u65F6\uFF0C$a_1\\geq n-17$\u3002</p></li></ul><h4 id="\u5B8C\u7F8E\u5E8F\u5217\u7684\u65B9\u6848\u6570" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u7F8E\u5E8F\u5217\u7684\u65B9\u6848\u6570" aria-hidden="true">#</a> \u5B8C\u7F8E\u5E8F\u5217\u7684\u65B9\u6848\u6570</h4><ul><li>\u5373\u4E0A\u9762\u7684\u505A\u6CD5\u7684 $b$ \u987A\u5E8F\u53EF\u4EE5\u4EFB\u610F\u6392\u5217\u3002</li><li>\u4F9D\u65E7\u56FA\u5B9A $a$ \u7684\u6700\u5C0F\u503C $x(x\\geq n-17)$\uFF1A <ul><li>\u8BBE $b_i=a_i-x$\uFF0C\u90A3\u4E48\uFF1A <ul><li>$\\exists k,b_k=0$</li><li>$0\\leq b_i\\leq n+1-x$</li><li>$b_1+b_2+\\cdots+b_n\\leq x$</li><li>$\\geq 1$ \u4E2A\u6570 $\\geq n+1-x$\uFF0C$\\geq 2$ \u4E2A\u6570 $\\geq n-x$\uFF0C...\uFF0C$\\geq n-x$ \u4E2A\u6570 $\\geq 2$\u3002 \u8FD9\u7B49\u4EF7\u4E8E $\\leq x$ \u4E2A\u6570 $\\leq 1$\uFF0C$\\leq x+1$ \u4E2A\u6570 $\\leq 2$\uFF0C...\uFF0C$\\leq n-1$ \u4E2A\u6570 $\\leq n-x$\uFF08\u518D\u52A0\u4E2A $\\leq n$ \u4E2A\u6570 $\\leq n+1-x$ \u4E5F\u4E0D\u5F71\u54CD\uFF09\u3002</li></ul></li><li>\u5BF9 $b$ \u8BA1\u6570\uFF0C\u8BBE $dp[i][j][k]$ \u8868\u793A\u8003\u8651\u5B8C\u503C $\\leq i$ \u7684\u4F4D\u7F6E\uFF0C\u5171\u9009\u4E86 $j(j\\leq x+i-1)$ \u4E2A\u6570\uFF0C\u9009\u7684\u6570\u4E4B\u548C\u4E3A $k$ \u7684\u65B9\u6848\u6570\u3002\u8F6C\u79FB\u679A\u4E3E\u6709 $t$ \u4E2A\u503C\u4E3A $i$ \u7684\u4F4D\u7F6E\uFF0C\u4ECE $\\frac{dp[i-1][j-t][k-i*t]}{t!}$ \u8F6C\u79FB\u8FC7\u6765\u3002\u9664\u8FD9\u4E2A\u9636\u4E58\u662F\u56E0\u4E3A\u7EC4\u5408\u6570\u9009\u4F4D\u7F6E\uFF0C\u6700\u540E\u8BA1\u7B97\u7B54\u6848\u8981\u4E58\u4E0A $n!$\u3002</li></ul></li><li>\u5B9E\u73B0\u65F6\u53EF\u4EE5\u4F7F\u7528\u8BB0\u5FC6\u5316\uFF0C\u5B9E\u9645\u7528\u5230\u7684\u72B6\u6001\u5E76\u4E0D\u591A\u3002\u7406\u8BBA\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A $O(n^3\\sqrt n\\log n)$\u3002</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>Mod<span class="token punctuation">,</span>x<span class="token punctuation">;</span>
ll fac<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inv<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>k<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token operator">!</span>j<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>inv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">&gt;</span>x<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>j<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>t<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span>
		res<span class="token operator">=</span><span class="token punctuation">(</span>res<span class="token operator">+</span><span class="token function">solve</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">-</span>t<span class="token punctuation">,</span>k<span class="token operator">-</span>i<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>Mod<span class="token punctuation">;</span>
	dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">;</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
	fac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>fac<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">%</span>Mod<span class="token punctuation">;</span>
	inv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Mod<span class="token operator">-</span>Mod<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>Mod<span class="token operator">%</span>i<span class="token punctuation">]</span><span class="token operator">%</span>Mod<span class="token punctuation">;</span>
	inv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>inv<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>inv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>Mod<span class="token punctuation">;</span>
	<span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>x<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>Mod<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld\\n&quot;</span><span class="token punctuation">,</span>ans<span class="token operator">*</span>fac<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">%</span>Mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),e=[o];function l(c,i){return a(),s("div",null,e)}var r=n(t,[["render",l],["__file","CF1603E.html.vue"]]);export{r as default};
