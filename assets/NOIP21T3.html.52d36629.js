import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,d as p}from"./app.e99e8fad.js";const t={},o=p(`<p>$$ \\begin{align*} n\\overline{a}&amp;=\\sum_{i=1}^na_i\\ \\ n^2D &amp;=n\\sum_{i=1}^n(a_i-\\overline{a})^2\\ &amp;=n\\sum_{i=1}^n a_i^2-2n\\overline{a}\\sum_{i=1}^n a_i+n^2\\overline{a}^2\\ &amp;=n\\sum_{i=1}^n a_i^2-2(\\sum_{i=1}^n a_i)^2+(\\sum_{i=1}^n a_i)^2\\ &amp;=n\\sum_{i=1}^n a_i^2-(\\sum_{i=1}^n a_i)^2\\ \\end{align*} $$</p><p>\u89C2\u5BDF\u9898\u76EE\u4E2D\u7684\u5F0F\u5B50\uFF0C$a&#39;<em>i\\leftarrow a</em>{i-1}+a_{i+1}-a_i$\uFF0C\u6839\u636E CF1110E \u7684\u5957\u8DEF\uFF0C\u53EF\u4EE5\u5DEE\u5206\uFF0C\u4EE4 $d_i=a_{i+1}-a_i(1\\leq i\\lt n)$\uFF0C\u4E00\u6B21\u64CD\u4F5C $(2\\leq i\\lt n)$ \u5373\uFF1A</p><p>$$ d&#39;<em>{i-1}=a&#39;</em>{i}-a&#39;<em>{i-1}=(a</em>{i-1}+a_{i+1}-a_i)-a_{i-1}=a_{i+1}-a_i=d_i\\ d&#39;<em>i=a&#39;</em>{i+1}-a&#39;<em>{i}=a</em>{i+1}-(a_{i-1}+a_{i+1}-a_i)=a_i-a_{i-1}=d_{i-1} $$</p><p>\u76F8\u5F53\u4E8E\u4EA4\u6362 $d_{i-1},d_i(2\\leq i\\lt n)$\uFF0C\u6545 $d$ \u53EF\u4EE5\u901A\u8FC7\u82E5\u5E72\u6B21\u64CD\u4F5C\uFF0C\u53D8\u4E3A\u4EFB\u610F $d$ \u7684\u6392\u5217\u3002</p><p>\u7531\u4E8E $a_1$ \u4E0D\u53D8\uFF0C\u90A3\u4E48 $a$ \u548C $d$ \u662F\u4E00\u4E00\u5BF9\u5E94\u7684\u3002\u73B0\u5728\u8981\u6C42\u4E00\u4E2A $d$ \u7684\u6392\u5217\u4F7F\u5F97 $n^2D$ \u6700\u5C0F\uFF0C\u7EE7\u7EED\u63A8\u5F0F\u5B50\uFF1A $$ \\begin{align*} n^2D &amp;=n\\sum_{i=1}^n a_i^2-(\\sum_{i=1}^n a_i)^2\\ &amp;=n\\sum_{i=1}^n a_i^2-\\sum_{i=1}^n\\sum_{j=1}^na_ia_j\\ &amp;=\\frac{1}{2}(n\\sum_{i=1}^n a_i^2-2\\sum_{i=1}^n\\sum_{j=1}^na_ia_j+n\\sum_{j=1}^n a_j^2)\\ &amp;=\\frac{1}{2}(\\sum_{i=1}^n\\sum_{j=1}^n(a_i-a_j)^2)\\ &amp;=\\sum_{i=1}^{n-1}\\sum_{j=i}^{n-1}(a_{j+1}-a_i)^2\\ &amp;=\\sum_{i=1}^{n-1}\\sum_{j=i}^{n-1}(d_i+d_{i+1}+\\cdots+d_j)^2\\ \\end{align*} $$ $n^2D$ \u53D6\u6700\u5C0F\u503C\u65F6\uFF0C$d$ \u4E00\u5B9A\u662F\u5148\u9012\u51CF\u540E\u9012\u589E\u7684\u3002</p><p>\u8003\u8651\u5728\u5206\u754C\u4F4D\u7F6E\uFF08\u5373\u9012\u51CF\u5230\u9012\u589E\uFF09\u4ECE\u5C0F\u5230\u5927\u5F80\u4E24\u8FB9\u52A0\u6570\uFF0C\u7531\u4E8E $$ \\begin{align*} n^2D &amp;=n\\sum_{i=1}^n a_i^2-(\\sum_{i=1}^n a_i)^2\\ \\end{align*} $$ \u7EF4\u62A4 $dp[k][s]$ \u8868\u793A\u5F53\u524D\u5DF2\u7ECF\u52A0\u5165\u4E86 $k$ \u4E2A\u6570\uFF0C\u73B0\u5728\u7684 $a$ \u4E4B\u548C\u4E3A $s$ \u7684\u6700\u5C0F $\\displaystyle \\sum_{i=1}^n a_i^2$\u3002</p><p>\u521D\u59CB $dp[1][s]=0$\u3002</p><p>\u8F6C\u79FB\u65F6\u8003\u8651\u52A0\u5230\u5DE6\u8FB9\u8FD8\u662F\u53F3\u8FB9\uFF1A</p><ul><li>\u5DE6\u8FB9\uFF1A\u539F\u6765\u662F $a_1,a_2,\\cdots,a_k$\uFF0C\u73B0\u5728\u53D8\u4E3A $d,a_1+d,a_2+d,\\cdots,a_k+d$\uFF0C\u65B0\u589E\u7684\u8D21\u732E\u4E3A</li></ul><p>$$ \\begin{align*} \\Delta &amp;=d^2+\\sum_{i=1}^k (d+a_i)^2-\\sum_{i=1}^k a_i^2\\ &amp;=(k+1)d^2+2d\\sum_{i=1}^ka_i\\ &amp;=(k+1)d^2+2ds\\ \\end{align*} $$</p><ul><li>\u53F3\u8FB9\uFF1A\u539F\u6765\u662F $a_1,a_2,\\cdots,a_k$\uFF0C\u73B0\u5728\u53D8\u4E3A $a_1,a_2,\\cdots,a_k,a_k+d$\uFF0C\u65B0\u589E\u7684\u8D21\u732E\u4E3A $$ \\begin{align*} \\Delta &amp;=(a_k+d)^2\\ \\end{align*} $$ \u5176\u5B9E\u53EF\u4EE5\u53D1\u73B0 $a_k$ \u662F\u56FA\u5B9A\u7684\uFF0C\u4E3A\u4E4B\u524D\u6240\u6709\u7684 $d$ \u4E4B\u548C\uFF0C\u4E0D\u9700\u8981\u518D\u8BB0\u5F55\u3002</li></ul><p>\u7B54\u6848\u4E3A $\\displaystyle \\min_s{n\\times dp[n][s]-s^2}$\u3002</p><p>\u5206\u6790\u4E00\u4E0B\u65F6\u95F4\u590D\u6742\u5EA6\uFF0C\u7B2C\u4E00\u7EF4\u662F $O(n)$ \u7684\uFF0C\u7B2C\u4E8C\u7EF4\u662F $O(nV)$ \u7684\uFF0C\u8F6C\u79FB $O(1)$\u3002</p><p>\u4F46\u662F\u53EF\u4EE5\u53D1\u73B0 $d$ \u4E3A $0$ \u7684\u8F6C\u79FB\u53EF\u4EE5\u5FFD\u7565\uFF0C\u7B2C\u4E00\u7EF4\u662F $O(\\min(n,V))$ \u7684\uFF0C\u603B\u590D\u6742\u5EA6\u4E3A $O(nV^2)$\uFF0C\u53EF\u4EE5\u901A\u8FC7\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">const</span> ll INF<span class="token operator">=</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span><span class="token number">60</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">11000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token number">11000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ll dp<span class="token punctuation">[</span><span class="token number">510000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ll <span class="token function">sqr</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">500000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>INF<span class="token punctuation">;</span>
	dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">int</span> lim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token operator">=</span>lim<span class="token punctuation">;</span>s<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">==</span>INF<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
			dp<span class="token punctuation">[</span>s<span class="token operator">+</span>sum<span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>s<span class="token operator">+</span>sum<span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">sqr</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			dp<span class="token punctuation">[</span>s<span class="token operator">+</span>i<span class="token operator">*</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>s<span class="token operator">+</span>i<span class="token operator">*</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>s<span class="token operator">*</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">sqr</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			dp<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>INF<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		lim<span class="token operator">+=</span>i<span class="token operator">*</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> sum<span class="token operator">+=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	ll ans<span class="token operator">=</span>INF<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>lim<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>INF<span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>n<span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1ll</span><span class="token operator">*</span>i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld\\n&quot;</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),e=[o];function c(i,u){return s(),a("div",null,e)}var r=n(t,[["render",c],["__file","NOIP21T3.html.vue"]]);export{r as default};
