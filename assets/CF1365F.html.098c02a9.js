import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,d as p}from"./app.e99e8fad.js";const t={},o=p(`<ul><li>\u7ED9\u5B9A $n$ \u548C\u6570\u5B57\u4E32 $a_1,a_2,\\cdots,a_n$\uFF0C$b_1,b_2,\\cdots,b_n$\u3002</li><li>\u5B9A\u4E49\u4E00\u6B21\u64CD\u4F5C\u4E3A\uFF1A\u5C06\u4E00\u4E2A\u7B49\u957F\u4E14\u4E0D\u76F8\u4EA4\u7684\u524D\u7F00\u548C\u540E\u7F00\u5BF9\u5E94\u4F4D\u7F6E\u4EA4\u6362\u3002\u4E3E\u4F8B\uFF1A\${1,2,3,4,5,6}$ \u4EA4\u6362\u957F\u5EA6\u4E3A $2$ \u7684\u524D\u540E\u7F00\u53D8\u4E3A \${5,6,3,4,1,2}$\u3002</li><li>\u53EF\u4EE5\u5BF9 $a$ \u8FDB\u884C\u4EFB\u610F\u6B21\u64CD\u4F5C\uFF0C\u95EE\u662F\u5426\u80FD\u53D8\u6210 $b$\u3002\u591A\u7EC4\u6570\u636E\u3002</li><li>$1\\leq T\\leq 500,1\\leq n\\leq 500,1\\leq a_i,b_i\\leq 10^9$\u3002</li></ul><h3 id="sol" tabindex="-1"><a class="header-anchor" href="#sol" aria-hidden="true">#</a> sol</h3><ul><li>\u4E00\u4E2A\u663E\u7136\u7684\u7ED3\u8BBA\uFF1A\u5982\u679C $n$ \u4E3A\u5947\u6570\uFF0C\u5219\u4E24\u4E2A\u4E32 $\\frac {n+1}2$ \u4F4D\u7F6E\u5FC5\u987B\u76F8\u540C\uFF08\u56E0\u4E3A\u4E0D\u80FD\u7FFB\u8F6C\uFF09\u3002</li><li>\u6211\u4EEC\u79F0\u4E0B\u6807\u548C\u4E3A $n+1$ \u7684\u6570\u662F\u5BF9\u5E94\u7684\uFF08\u6362\u53E5\u8BDD\u8BF4\uFF0C\u7B2C $i$ \u4E2A\u4F4D\u7F6E\u7684\u6570\u548C\u7B2C $n-i+1$ \u4F4D\u7F6E\u7684\u6570\u662F\u5BF9\u5E94\u7684\uFF09\uFF0C\u90A3\u4E48\u53EF\u4EE5\u53D1\u73B0\uFF0C\u5BF9\u5E94\u4F4D\u7F6E\u5F62\u6210\u7684\u65E0\u5E8F\u5BF9\u662F\u6C38\u8FDC\u4E0D\u4F1A\u6539\u53D8\u7684\uFF08\u5BF9\u4E8E\u5DE6\u8FB9\u7684\u6570 $i$ \u79FB\u52A8\u5230 $i+(n-k)$\uFF0C\u5BF9\u4E8E\u53F3\u8FB9\u7684\u6570 $n-i+1$ \u79FB\u52A8\u5230 $n-i+1-(n-k)$\uFF0C\u5B83\u4EEC\u4E4B\u548C\u4F9D\u65E7\u4E3A $n+1$\uFF09\u3002</li><li>\u4E8E\u662F\u5927\u80C6\u731C\u6D4B\u539F\u95EE\u9898\u7B49\u4EF7\u4E8E\u662F\u5426\u6EE1\u8DB3 $a,b$ \u65E0\u5E8F\u5BF9\u76F8\u540C\u3002</li></ul><h4 id="\u8BC1\u660E" tabindex="-1"><a class="header-anchor" href="#\u8BC1\u660E" aria-hidden="true">#</a> \u8BC1\u660E</h4><ul><li>\u9996\u5148\uFF0C\u4E0A\u8FF0\u7ED3\u8BBA\u662F\u5FC5\u8981\u7684\u3002</li><li>\u5176\u6B21\uFF0C\u82E5\u5BF9\u4E8E\u6EE1\u8DB3\u4E0A\u8FF0\u7ED3\u8BBA\u7684 $a$\uFF0C\u80FD\u6784\u9020\u51FA\u5408\u6CD5\u7684\u64CD\u4F5C\u5E8F\u5217\uFF0C\u90A3\u4E48\u539F\u95EE\u9898\u548C $a$ \u662F\u5426\u6EE1\u8DB3\u4E0A\u8FF0\u7ED3\u8BBA\u662F\u7B49\u4EF7\u7684\u3002\u63A5\u4E0B\u6765\u9700\u8981\u6784\u9020\u64CD\u4F5C\u5E8F\u5217\u3002</li><li>\u6734\u7D20\u7684\u60F3\u6CD5\u662F\u4ECE\u4E2D\u95F4\u5230\u4E24\u8FB9\u4F9D\u6B21\u786E\u5B9A\uFF0C\u56E0\u4E3A\u56FA\u5B9A\u4F4F\u4E2D\u95F4\u4E0D\u5F71\u54CD\u540E\u7EED\u64CD\u4F5C\uFF0C\u4E14\u56FA\u5B9A\u540E\u4E0D\u5F71\u54CD\u4E0A\u8FF0\u7ED3\u8BBA\u662F\u5426\u6210\u7ACB\uFF08\u5220\u9664\u4E86\u76F8\u540C\u7684\u65E0\u5E8F\u5BF9\u4E0D\u5F71\u54CD\u7ED3\u8BBA\uFF09\u3002</li><li>\u8003\u8651\u73B0\u5728\u56FA\u5B9A $a_i,a_{n-i+1}$\uFF0C\u627E\u76F8\u540C\u7684\u65E0\u5E8F\u5BF9 $a_j,a_{n-j+1}$ \u79FB\u52A8\u8FC7\u6765\u3002\u8BBE $a_i=a_j$\uFF0C\u5206\u60C5\u51B5\u8BA8\u8BBA\uFF1A <ol><li>$j=n$\uFF0C\u90A3\u4E48\u76F4\u63A5\u7FFB\u8F6C\u957F\u5EA6\u4E3A $i$ \u7684\u524D\u540E\u7F00\uFF0C\u90A3\u4E48 $a_n$ \u7FFB\u5230 $a_i$\uFF0C$a_1$ \u7FFB\u5230 $a_{n-i+1}$\uFF0C\u6EE1\u8DB3\u6761\u4EF6\uFF1B</li><li>$j=1$\uFF0C\u90A3\u4E48\u76F4\u63A5\u7FFB\u8F6C\u957F\u5EA6\u4E3A $1$ \u7684\u524D\u540E\u7F00\uFF0C\u5C31\u53D8\u6210 1. \u7684\u60C5\u51B5\u4E86\uFF1B</li><li>\u5176\u5B83\uFF0C\u90A3\u4E48\u7FFB\u8F6C\u957F\u5EA6\u4E3A $j(n-j+1)$ \u7684\u524D\u540E\u7F00\uFF0C\u90A3\u4E48 $j$ \u5C31\u53D8\u6210 1./2. \u7684\u60C5\u51B5\u4E86\u3002</li></ol></li><li>\u8FD9\u6837\u5C31\u53D8\u6210\u89C4\u6A21\u66F4\u5C0F\u7684\u5B50\u95EE\u9898\u4E86\uFF0C\u6240\u4EE5\u8BC1\u660E\u4E86\u6EE1\u8DB3\u4E0A\u8FF0\u6761\u4EF6\u5373\u6210\u7ACB\u3002</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>
<span class="token keyword">int</span> T<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
pii x<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> m<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">pii</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">pii</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sort</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[o];function e(l,u){return s(),a("div",null,c)}var r=n(t,[["render",e],["__file","CF1365F.html.vue"]]);export{r as default};
